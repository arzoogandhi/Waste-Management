/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.GradingOfficerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HealthDeptEnterprise;
import Business.Network.Network;
import Business.Organization.HealthDept.GradedRawMaterial;
import Business.Organization.HealthDept.GradedRawmaterialList;
import Business.Organization.HealthDept.ProductGradingCentreOrganization;
import Business.Organization.Organization;
import Business.Organization.WasteManagement.RawMaterial;
import Business.Organization.WasteManagement.RawmaterialList;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.TransformManagerWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import Business.WorkQueue.GradingOfficerWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.ir.RuntimeNode;
import userinterface.TransformManagerRole.ViewRawMaterialJPanel;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @author arzoo
 */
public class viewRawmatJpanel extends javax.swing.JPanel {
private JPanel userProcessContainer;
    private GradingOfficerWorkRequest request;
    private UserAccount userAccount;
    private int selectedRow; 
    private Enterprise enterprise;
    private EcoSystem business;
    private JPanel container;
    private GradedRawmaterialList rawlist;

   // private ProductGradingCentreOrganization productGradingCentreOrganization;
    
    viewRawmatJpanel(JPanel userProcessContainer, GradingOfficerWorkRequest request, UserAccount userAccount, int selectedRow, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.userAccount = userAccount;
        this.selectedRow = selectedRow;
        this.enterprise = enterprise;
        this.business = business;
        rawlist = new GradedRawmaterialList();
        populateTable();
       
    }
    
     RawmaterialList rawmatlist = new RawmaterialList();
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        raw_tbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        disapprovebtn = new javax.swing.JButton();
        approvebtn = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 231, 226));

        raw_tbl.setBackground(new java.awt.Color(204, 255, 204));
        raw_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Raw Materials", "Approval Status", "Reason"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(raw_tbl);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("List of Raw Materials");

        jLabel2.setText("Reason for disapproval:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        disapprovebtn.setBackground(new java.awt.Color(0, 204, 153));
        disapprovebtn.setText("Disapprove");
        disapprovebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disapprovebtnActionPerformed(evt);
            }
        });

        approvebtn.setBackground(new java.awt.Color(0, 204, 153));
        approvebtn.setText("Approve");
        approvebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approvebtnActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(0, 204, 153));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 204, 153));
        jButton1.setText("Send Report to Transform");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 204, 153));
        jButton2.setText("Generate PDF");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(backJButton)
                        .addGap(203, 203, 203)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(disapprovebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(approvebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(69, 69, 69)))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(backJButton))
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(approvebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(disapprovebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(119, 119, 119))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void approvebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approvebtnActionPerformed
        GradedRawMaterial raw=new GradedRawMaterial();
        //rawlist = new GradedRawmaterialList();
        if (request.getApproveRawList().size() > 0) {
            rawlist.setAppprovedrawList(request.getApproveRawList());
        }
        int selectedRow = raw_tbl.getSelectedRow();
         if (selectedRow < 0){
           JOptionPane.showMessageDialog(null, "Please select a row");

        }
                //GradingOfficerWorkRequest request = new GradingOfficerWorkRequest();

         if(raw_tbl.getValueAt(selectedRow, 1)!= null){ 
             JOptionPane.showMessageDialog(null, "This raw material has already been" + raw_tbl.getValueAt(selectedRow, 1));
         }
         else{
           for(RawMaterial rawmate : rawmatlist.getRawList()) {
             if(rawmate.getRawmatname().equals(raw_tbl.getValueAt(selectedRow, 0).toString())) {
                 raw.setRawmatname(raw_tbl.getValueAt(selectedRow, 0).toString());
                 raw.setGrade("Approved");
                 raw.setReason(jTextArea1.getText());
                 rawlist.addARaw(raw);
                 rawmate.setGrade("Approved");
                 rawmate.setReason("");
            }
           }
        request.setGradeRawList(rawmatlist.getRawList());
        request.setApproveRawList(rawlist.getAppprovedrawList());
        populateTable();
        }
        
    }//GEN-LAST:event_approvebtnActionPerformed

    private void disapprovebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disapprovebtnActionPerformed
        
        if (request.getDisapproveRawList().size() > 0) {
            rawlist.setDisappprovedrawList(request.getDisapproveRawList());
        }
        //rawlist = new GradedRawmaterialList(); 
        int selectedRow = raw_tbl.getSelectedRow(); 
          GradedRawMaterial draw=new GradedRawMaterial();
          if (selectedRow < 0){
           JOptionPane.showMessageDialog(null, "Please select a row");

        }
       
         else{
         if(raw_tbl.getValueAt(selectedRow, 1)!= null){ 
             JOptionPane.showMessageDialog(null, "This raw material has already been" + raw_tbl.getValueAt(selectedRow, 1));
         }
        else{
            if(jTextArea1.getText().isEmpty()){
               JOptionPane.showMessageDialog(null, "Please enter the reason for dssapproving"); 
            }
            else {
                for(RawMaterial rawmate : rawmatlist.getRawList()) {
                    if(rawmate.getRawmatname().equals(raw_tbl.getValueAt(selectedRow, 0).toString())) {
                        draw.setRawmatname(raw_tbl.getValueAt(selectedRow, 0).toString());
                        draw.setGrade("Disapproved");
                        rawmate.setGrade("Disapproved");     
                        draw.setReason(jTextArea1.getText());
                        rawmate.setReason(jTextArea1.getText());
                        rawlist.addDRaw(draw);
                        rawmate.setReason(jTextArea1.getText());
                      
                    }
                }
                request.setGradeRawList(rawmatlist.getRawList());
                request.setDisapproveRawList(rawlist.getDisappprovedrawList());
                populateTable();
            }
         }
          }
          
          jTextArea1.setText("");
    }//GEN-LAST:event_disapprovebtnActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean flag = true;
        request.setStatus("Graded");
         for(RawMaterial rawmate : rawmatlist.getRawList()) {
             if(rawmate.getReason()== null){
                 flag=false;
                 break;
             }
         }
          TransformManagerWorkRequest transreq = new TransformManagerWorkRequest();
          
     if(flag == true){     
    Organization org = null;
    
    
    for (Network network : business.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise instanceof HealthDeptEnterprise) {
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof ProductGradingCentreOrganization){
                org = organization;
                break;
            }
                            }
                        }

                    }
                }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(transreq);
            userAccount.getWorkQueue().getWorkRequestList().add(transreq);
            String to = "";
         String from = org.getWorkQueue().getWorkRequestList().get(0).getSender().getEmail();
       String subject = "New request has been generated";
       String message = "Hi Greeting of the day!!\n\n A new raw material quality grading task has been sent\n\n You can assign it to yourself\n\n Thank You";
       
       for(UserAccount ua : org.getUserAccountDirectory().getUserAccountList()){
           to += ","+ua.getEmail();
       }
        sendEmail(from,to, subject, message);
        }
        JOptionPane.showMessageDialog(null, "Graded raw materials sent back to Transformation center", "Information Message", JOptionPane.INFORMATION_MESSAGE);

     }
     else{
        JOptionPane.showMessageDialog(null, "Please grade all the raw material in the request", "Information Message", JOptionPane.INFORMATION_MESSAGE);

     }
        
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream("HelloWorld.pdf"));

            document.open();
            Font font = FontFactory.getFont(FontFactory.TIMES_BOLD, 16, BaseColor.BLACK);
            Paragraph para = new Paragraph("List of Raw Materials", font);
            para.setAlignment(Element.ALIGN_CENTER);

            PdfPTable table = new PdfPTable(3);
            //add header
            Stream.of("Raw Material", "Status", "Reason")
            .forEach(columnTitle -> {
                PdfPCell header = new PdfPCell();
                header.setBackgroundColor(BaseColor.LIGHT_GRAY);
                header.setBorderWidth(2);
                header.setPhrase(new Phrase(columnTitle));
                table.addCell(header);
            });

            for (RawMaterial rawMaterial : request.getGradeRawList()) {
                //add rows & data
                table.addCell(rawMaterial.getRawmatname());
                table.addCell(rawMaterial.getGrade());
                table.addCell(rawMaterial.getReason());
            }
            document.add(para);
            document.add(Chunk.NEWLINE);
            document.add(table);
            document.close();
        } catch (Exception ex) {
            Logger.getLogger(GradingOfficerWorkArea.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approvebtn;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton disapprovebtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable raw_tbl;
    // End of variables declaration//GEN-END:variables
//    System.out.println("request"+req)
    private void populateTable() {
        rawmatlist.setRawList(request.getGradeRawList());
         DefaultTableModel dtm = (DefaultTableModel)raw_tbl.getModel();
        dtm.setRowCount(0);
      for(RawMaterial rawmat :request.getGradeRawList())
         {
            Object[] row = new Object[3];
            row[0] = rawmat;
            row[1]=rawmat.getGrade();
            row[2]=rawmat.getReason();

            dtm.addRow(row);
        }//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public void sendEmail(String from,String to,String sub,String msg){
 // Recipient's email ID needs to be mentioned.
     
      // Assuming you are sending email from localhost
      String host = "localhost";

      // Get system properties
      Properties properties = System.getProperties();

      // Setup mail server
      properties.setProperty("mail.host", "smtp.gmail.com");
      properties.setProperty("mail.smtp.port", "465");
      properties.setProperty("mail.defaultEncoding", "UTF-8");
      properties.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
      properties.setProperty("mail.smtp.socketFactory.fallback", "false");
      properties.setProperty("mail.smtp.ssl.enable", "true");
      properties.setProperty("mail.smtp.socketFactory.port", "465");
      properties.setProperty("mail.smtp.auth", "true");
      properties.setProperty("mail.smtp.starttls.enable", "true");
      
      properties.setProperty("mail.smtp.starttls.required", "true");
      properties.setProperty("mail.smtp.starttls.enable", "true");
      
      
      
      
      // Get the default Session object.
      Session session = Session.getDefaultInstance(properties);

      try {
         // Create a default MimeMessage object.
         MimeMessage message = new MimeMessage(session);

         // Set From: header field of the header.
         message.setFrom(new InternetAddress(from));

         // Set To: header field of the header.
         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

         // Set Subject: header field
         message.setSubject(sub);

         // Now set the actual message
         message.setText(msg);

         // Send message
         Transport.send(message,from,"");
         System.out.println("Sent message successfully....");
      } catch (MessagingException mex) {
         mex.printStackTrace();
      }
   }
    
}
