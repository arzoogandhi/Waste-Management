/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.TransformManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HealthDeptEnterprise;
import Business.Enterprise.RecyclePlantEnterprise;
import Business.Network.Network;
import Business.Organization.HealthDept.ProductGradingCentreOrganization;
import Business.Organization.HealthDept.endmaterialList;
import Business.Organization.HealthDept.endpro;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.DistributionCentreOrganization;
import Business.Organization.RecyclePlant.DistributionCentreOrganization;
import Business.Organization.RecyclePlant.EndProduct;
import Business.Organization.RecyclePlant.InventoryDirectory;
import Business.Organization.RecyclePlant.TransformationPlantOrganization;
import Business.Organization.WasteManagement.RawMaterial;
import Business.Organization.WasteManagement.RawmaterialList;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DistributorWorkRequest;
import Business.WorkQueue.TransformManagerWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ANKIT
 */
public class TransformationJPanel extends javax.swing.JPanel {
 private JPanel userProcessContainer;
    private TransformationPlantOrganization transformationPlantorganization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    private TransformManagerWorkRequest request;
    private InventoryDirectory inventoryDirectory;
     endmaterialList rawlista = new endmaterialList();
    /**
     * Creates new form TransformationJPanel
     */
//    public TransformationJPanel() {
//        initComponents();
//    }

    TransformationJPanel(JPanel userProcessContainer, TransformManagerWorkRequest request, UserAccount userAccount, int selectedRow, Enterprise enterprise, EcoSystem business) {
       initComponents();
      this.userProcessContainer = userProcessContainer;
       // this.transformationPlantorganization = (TransformationPlantOrganization)organization;
       this.request = request;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.business = business;
           populateTable();//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    } 
//initComponents();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        recycledProductJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        sendToDistributor = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 231, 226));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Recycled Produts");

        recycledProductJTable.setBackground(new java.awt.Color(204, 255, 204));
        recycledProductJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw Material 1", "Quantity", "Raw Material 2", "Quantity", "End Product"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(recycledProductJTable);
        if (recycledProductJTable.getColumnModel().getColumnCount() > 0) {
            recycledProductJTable.getColumnModel().getColumn(0).setResizable(false);
            recycledProductJTable.getColumnModel().getColumn(1).setResizable(false);
            recycledProductJTable.getColumnModel().getColumn(2).setResizable(false);
            recycledProductJTable.getColumnModel().getColumn(3).setResizable(false);
            recycledProductJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(0, 204, 153));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Generate Report");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        sendToDistributor.setBackground(new java.awt.Color(0, 204, 153));
        sendToDistributor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sendToDistributor.setText("Send List to Distributors");
        sendToDistributor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sendToDistributor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToDistributorActionPerformed(evt);
            }
        });

        backJButton.setBackground(new java.awt.Color(0, 204, 153));
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(27, 27, 27)
                            .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(173, 173, 173)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(256, 256, 256)
                            .addComponent(sendToDistributor, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(205, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(sendToDistributor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(257, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendToDistributorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToDistributorActionPerformed
        DistributorWorkRequest disreq = new DistributorWorkRequest();
      disreq.setRecycledList(rawlista.getRawList());
      disreq.setSource(request.getSource());
      disreq.setSender(userAccount);
      disreq.setStatus("Recycled");
          
         
    Organization org = null;
    
    for (Network network : business.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise instanceof RecyclePlantEnterprise) {
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof DistributionCentreOrganization){
                org = organization;
                break;
            }
                            }
                        }

                    }
                }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(disreq);
            userAccount.getWorkQueue().getWorkRequestList().add(disreq);
             JOptionPane.showMessageDialog(null, "sent to distributor", "Information Message", JOptionPane.INFORMATION_MESSAGE);
             String to = "";
       String from = userAccount.getEmail();
       String subject = "New request has been generated";
       String message = "Hi Greeting of the day!!\n\n A new waste collection has been sent\n\n You can assign it to yourself\n\n Thank You";
       
       for(UserAccount ua : org.getUserAccountDirectory().getUserAccountList()){
           to += ","+ua.getEmail();
       }
        sendEmail(from,to, subject, message);

        }
        
        
    }//GEN-LAST:event_sendToDistributorActionPerformed


    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable recycledProductJTable;
    private javax.swing.JButton sendToDistributor;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        endpro endp = new endpro();
        List<RawMaterial> approvedRawMaterials = this.request.getTransformRawList();
        
        DefaultTableModel dtm = (DefaultTableModel)recycledProductJTable.getModel();
        dtm.setRowCount(0);
        for(EndProduct endProduct: InventoryDirectory.getInventoryList()) {
            Object[] row = new Object[6];
            for (RawMaterial rawMaterial: approvedRawMaterials) {
                if (endProduct.getRawMaterial_1().equalsIgnoreCase(rawMaterial.getRawmatname()) && endProduct.getRawMaterial_2() == null) {
                    row[0] = endProduct.getRawMaterial_1();
                    row[1] = endProduct.getRawMaterial_1_Weight();
                    row[4] = endProduct.getEndProduct();
                } else {
                    if (endProduct.getRawMaterial_2() != null && endProduct.getRawMaterial_1() != null) {
                        String combinedString = endProduct.getRawMaterial_1().concat(endProduct.getRawMaterial_2());
                        if (combinedString.contains(rawMaterial.getRawmatname())) {
                            int i =0;
                            float weigth=0.0f;
                            for (RawMaterial rawMaterial1: approvedRawMaterials) {
                                
                                if (combinedString.contains(rawMaterial1.getRawmatname())) {
                                    weigth=weigth+rawMaterial.getRawmatweight();
                                    i = i + 1;
                                }
                            }
                            if (i == 2 ) {
                                row[0] = endProduct.getRawMaterial_1();
                                row[1] = endProduct.getRawMaterial_1_Weight();
                                row[2] = endProduct.getRawMaterial_2();
                                row[3] = endProduct.getRawMaterial_2_Weight();
                                row[4] = endProduct.getEndProduct();
                                 endProduct.setAmount((int) (weigth/(endProduct.getRawMaterial_1_Weight()+endProduct.getRawMaterial_2_Weight()))); 
                            }
                        }
                    }
                }
            }
            if(row[0] !=null){
                endp.setRawmatname(row[0].toString());
                endp.setRawmatweight(endProduct.getAmount());
                rawlista.addRaw(endp);
            dtm.addRow(row);
            }
        }
    }
      public void sendEmail(String from,String to,String sub,String msg){
 // Recipient's email ID needs to be mentioned.
     
      // Assuming you are sending email from localhost
      String host = "localhost";

      // Get system properties
      Properties properties = System.getProperties();

      // Setup mail server
      properties.setProperty("mail.host", "smtp.gmail.com");
      properties.setProperty("mail.smtp.port", "465");
      properties.setProperty("mail.defaultEncoding", "UTF-8");
      properties.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
      properties.setProperty("mail.smtp.socketFactory.fallback", "false");
      properties.setProperty("mail.smtp.ssl.enable", "true");
      properties.setProperty("mail.smtp.socketFactory.port", "465");
      properties.setProperty("mail.smtp.auth", "true");
      properties.setProperty("mail.smtp.starttls.enable", "true");
      
      properties.setProperty("mail.smtp.starttls.required", "true");
      properties.setProperty("mail.smtp.starttls.enable", "true");
      
      
      
      
      // Get the default Session object.
      Session session = Session.getDefaultInstance(properties);

      try {
         // Create a default MimeMessage object.
         MimeMessage message = new MimeMessage(session);

         // Set From: header field of the header.
         message.setFrom(new InternetAddress(from));

         // Set To: header field of the header.
         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

         // Set Subject: header field
         message.setSubject(sub);

         // Now set the actual message
         message.setText(msg);

         // Send message
         Transport.send(message,from,"Ayush@123");
         System.out.println("Sent message successfully....");
      } catch (MessagingException mex) {
         mex.printStackTrace();
      }
   }
}
